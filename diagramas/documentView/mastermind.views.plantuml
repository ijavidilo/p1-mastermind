@startuml

class  mastermind.views.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- initial: char
- Color(char)
+ {static} valueOf(String): Color
~ {static} getInstance(char): Color
~ {static} getInstance(int): Color
~ {static} allInitials(): String
~ getInitial(): char
}

class  mastermind.views.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- message: String
- Error(String)
+ {static} valueOf(String): Error
~ getMessage(): String
}
mastermind.views.Error ..> mastermind.views.Color

class  mastermind.views.Message{
+ {static} TURN: Message
+ {static} SECRET: Message
+ {static} RESUME: Message
+ {static} RESULT: Message
+ {static} PROPOSED_COMBINATION: Message
+ {static} TITLE: Message
+ {static} WINNER: Message
+ {static} LOOSER: Message
- message: String
- Message(String)
+ {static} valueOf(String): Message
~ getMessage(): String
}

class  mastermind.views.ProposalView{
~ ProposalView()
- proposeCombination(int[], Game): int
~ interact(Game): boolean
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.ProposalView
mastermind.views.ProposalView ..> mastermind.models.Game
mastermind.views.ProposalView ..> mastermind.views.Message
mastermind.views.ProposalView ..> mastermind.views.Error
mastermind.views.ProposalView ..> mastermind.views.SecretCombinationView
mastermind.views.ProposalView ..> mastermind.views.ProposedCombinationView
mastermind.views.ProposalView ..> mastermind.views.ResultView

class  mastermind.views.ProposedCombinationView{
- {static} ERROR_CODE: int
~ ProposedCombinationView()
~ write(int[]): void
~ read(): int[]
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.ProposedCombinationView
mastermind.views.ProposedCombinationView..> mastermind.views.Message
mastermind.views.ProposedCombinationView..> mastermind.views.Color


class  mastermind.views.ResultView{
~ ResultView()
~ writeln(int[]): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.ResultView
mastermind.views.ResultView..> mastermind.views.Message

class  mastermind.views.ResumeView{
~ ResumeView()
~ interact(Game): boolean
}
mastermind.views.ResumeView ..> mastermind.models.Game
mastermind.views.ResumeView..> mastermind.views.Message

class  mastermind.views.SecretCombinationView{
~ SecretCombinationView()
~ writeln(int): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.SecretCombinationView
mastermind.views.SecretCombinationView..> mastermind.views.Message

class  mastermind.views.StartView{
~ StartView()
~ interact(Game): void
}
mastermind.utils.WithConsoleView <|-down- mastermind.views.StartView
mastermind.views.StartView ..> mastermind.models.Game
mastermind.views.StartView..> mastermind.views.Message

class  mastermind.views.View{
# game: Game
- startView: StartView
- proposalView: ProposalView
- resumeView: ResumeView
+ View(Game)
+ interact(): void
}
mastermind.views.View *-down-> mastermind.views.ProposalView
mastermind.views.View *-down-> mastermind.views.StartView
mastermind.views.View *-down-> mastermind.models.Game
mastermind.views.View *-down-> mastermind.views.ResumeView

@enduml