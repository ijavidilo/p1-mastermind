@startuml

class  mastermind.models.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- Color()
+ {static} valueOf(String): Color
~ {static} length(): int
~ {static} getInstance(int): Color
}

class  mastermind.models.Combination{
- {static} WIDTH: int
# colors: List<Color>
# Combination()
+ {static} getWidth(): int
}
mastermind.models.Combination *-down-> java.util.List
mastermind.models.Combination *-down-> mastermind.models.Color

class  mastermind.models.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- Error()
+ {static} valueOf(String): Error
}

class  mastermind.models.Game{
+ {static} NO_ERROR: int
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombinations: List<ProposedCombination>
- results: List<Result>
- turn: int
+ Game()
+ clear(): void
+ proposeCombination(ProposedCombination): void
+ getWidth(): int
+ isLooser(): boolean
+ getTurn(): int
+ isWinner(): boolean
+ getCodes(): int[][][]
}
mastermind.models.Game *-down-> java.util.List
mastermind.models.Game *-down-> mastermind.models.SecretCombination
mastermind.models.Game *-down-> mastermind.models.Result
mastermind.models.Game --> mastermind.models.ProposedCombination

class  mastermind.models.ProposedCombination{
+ ProposedCombination()
~ contains(Color): boolean
~ contains(int, Color): boolean
+ {static} getInstance(int[]): ProposedCombination
+ {static} isValid(int[]): Error
~ getCodes(): int[]
}
mastermind.models.Combination <|-down- mastermind.models.ProposedCombination
mastermind.models.ProposedCombination ..> mastermind.models.Error

class  mastermind.models.Result{
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getCodes(): int[]
}

class  mastermind.models.SecretCombination{
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
mastermind.models.Combination <|-down- mastermind.models.SecretCombination
mastermind.models.SecretCombination ..> mastermind.models.Result
mastermind.models.SecretCombination ..> mastermind.models.ProposedCombination

@enduml