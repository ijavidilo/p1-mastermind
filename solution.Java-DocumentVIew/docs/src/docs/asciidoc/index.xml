<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Master Mind. Solucion 2.1. <emphasis role="strong">documentView</emphasis></title>
<date>2019-10-01</date>
<author>
<personname>
<firstname>Santa</firstname>
<surname>Tecla</surname>
</personname>
<email>parqueNaturalSantaTecla@gmail.com</email>
</author>
<authorinitials>ST</authorinitials>
</info>
<section xml:id="requisitos-1-básica">
<title>Requisitos 1. <emphasis role="strong">Básica</emphasis></title>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<tbody>
<row>
<entry align="left" valign="top"><itemizedlist>
<listitem>
<simpara><link xl:href="https://en.wikipedia.org/wiki/Mastermind_(board_game)"><emphasis role="strong">Wiki</emphasis></link> - <link xl:href="https://www.youtube.com/watch?v=2-hTeg2M6GQ"><emphasis role="strong">Youtube</emphasis></link></simpara>
<itemizedlist>
<listitem>
<simpara><emphasis>Funcionalidad: <emphasis role="strong">Básica</emphasis></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis>Interfaz: <emphasis role="strong">Texto</emphasis></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis>Distribución: <emphasis role="strong">Standalone</emphasis></emphasis></simpara>
</listitem>
<listitem>
<simpara><emphasis>Persistencia: <emphasis role="strong">No</emphasis></emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/Dibujo.jpg"/>
</imageobject>
<textobject><phrase>Dibujo</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="vista-de-lógicadiseño">
<title>Vista de Lógica/Diseño</title>
<itemizedlist>
<listitem>
<simpara>Arquitectura Documento/Vista mediante <emphasis role="strong">Patrón de Vista Separada</emphasis></simpara>
</listitem>
</itemizedlist>
<section xml:id="arquitectura">
<title>Arquitectura</title>
<literallayout class="monospaced">package mastermind #DDDDDD { }
mastermind .down.&gt; mastermind.views
mastermind .down.&gt; mastermind.models

package mastermind.models #DDDDDD { }
package java.util{ }
mastermind.models .down.&gt; java.util

package mastermind.utils #DDDDDD { }
package java.io{ }
mastermind.utils .down.&gt; java.io

package mastermind.views #DDDDDD { }
mastermind.views .down.&gt; mastermind.models
mastermind.views .down.&gt; mastermind.utils</literallayout>
</section>
<section xml:id="paquete-mastermind">
<title>Paquete <emphasis>mastermind</emphasis></title>
<literallayout class="monospaced">class  mastermind.Mastermind{
- game: Game
- view: View
- Mastermind()
+ {static} main(String[]): void
- play(): void
}
mastermind.Mastermind *-down-&gt; mastermind.views.View
mastermind.Mastermind *-down-&gt; mastermind.models.Game</literallayout>
</section>
<section xml:id="paquete-mastermind-views">
<title>Paquete <emphasis>mastermind.views</emphasis></title>
<literallayout class="monospaced">class  mastermind.views.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- initial: char
- Color(char)
+ {static} valueOf(String): Color
~ {static} getInstance(char): Color
~ {static} getInstance(int): Color
~ {static} allInitials(): String
~ getInitial(): char
}

class  mastermind.views.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- message: String
- Error(String)
+ {static} valueOf(String): Error
~ getMessage(): String
}
mastermind.views.Error ..&gt; mastermind.views.Color

class  mastermind.views.Message{
+ {static} TURN: Message
+ {static} SECRET: Message
+ {static} RESUME: Message
+ {static} RESULT: Message
+ {static} PROPOSED_COMBINATION: Message
+ {static} TITLE: Message
+ {static} WINNER: Message
+ {static} LOOSER: Message
- message: String
- Message(String)
+ {static} valueOf(String): Message
~ getMessage(): String
}

class  mastermind.views.ProposalView{
~ ProposalView()
- proposeCombination(int[], Game): int
~ interact(Game): boolean
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.views.ProposalView
mastermind.views.ProposalView ..&gt; mastermind.models.Game
mastermind.views.ProposalView ..&gt; mastermind.views.Message
mastermind.views.ProposalView ..&gt; mastermind.views.Error
mastermind.views.ProposalView ..&gt; mastermind.views.SecretCombinationView
mastermind.views.ProposalView ..&gt; mastermind.views.ProposedCombinationView
mastermind.views.ProposalView ..&gt; mastermind.views.ResultView

class  mastermind.views.ProposedCombinationView{
- {static} ERROR_CODE: int
~ ProposedCombinationView()
~ write(int[]): void
~ read(): int[]
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.views.ProposedCombinationView
mastermind.views.ProposedCombinationView..&gt; mastermind.views.Message
mastermind.views.ProposedCombinationView..&gt; mastermind.views.Color


class  mastermind.views.ResultView{
~ ResultView()
~ writeln(int[]): void
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.views.ResultView
mastermind.views.ResultView..&gt; mastermind.views.Message

class  mastermind.views.ResumeView{
~ ResumeView()
~ interact(Game): boolean
}
mastermind.views.ResumeView ..&gt; mastermind.models.Game
mastermind.views.ResumeView..&gt; mastermind.views.Message

class  mastermind.views.SecretCombinationView{
~ SecretCombinationView()
~ writeln(int): void
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.views.SecretCombinationView
mastermind.views.SecretCombinationView..&gt; mastermind.views.Message

class  mastermind.views.StartView{
~ StartView()
~ interact(Game): void
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.views.StartView
mastermind.views.StartView ..&gt; mastermind.models.Game
mastermind.views.StartView..&gt; mastermind.views.Message

class  mastermind.views.View{
# game: Game
- startView: StartView
- proposalView: ProposalView
- resumeView: ResumeView
+ View(Game)
+ interact(): void
}
mastermind.views.View *-down-&gt; mastermind.views.ProposalView
mastermind.views.View *-down-&gt; mastermind.views.StartView
mastermind.views.View *-down-&gt; mastermind.models.Game
mastermind.views.View *-down-&gt; mastermind.views.ResumeView</literallayout>
</section>
<section xml:id="paquete-mastermind-models">
<title>Paquete <emphasis>mastermind.models</emphasis></title>
<literallayout class="monospaced">class  mastermind.models.Color{
+ {static} RED: Color
+ {static} BLUE: Color
+ {static} YELLOW: Color
+ {static} GREEN: Color
+ {static} ORANGE: Color
+ {static} PURPLE: Color
- Color()
+ {static} valueOf(String): Color
~ {static} length(): int
~ {static} getInstance(int): Color
}

class  mastermind.models.Combination{
- {static} WIDTH: int
# colors: List&lt;Color&gt;
# Combination()
+ {static} getWidth(): int
}
mastermind.models.Combination *-down-&gt; java.util.List
mastermind.models.Combination *-down-&gt; mastermind.models.Color

class  mastermind.models.Error{
+ {static} DUPLICATED: Error
+ {static} WRONG_CHARACTERS: Error
+ {static} WRONG_LENGTH: Error
- Error()
+ {static} valueOf(String): Error
}

class  mastermind.models.Game{
+ {static} NO_ERROR: int
- {static} MAX_LONG: int
- secretCombination: SecretCombination
- proposedCombinations: List&lt;ProposedCombination&gt;
- results: List&lt;Result&gt;
- turn: int
+ Game()
+ clear(): void
+ proposeCombination(ProposedCombination): void
+ getWidth(): int
+ isLooser(): boolean
+ getTurn(): int
+ isWinner(): boolean
+ getCodes(): int[][][]
}
mastermind.models.Game *-down-&gt; java.util.List
mastermind.models.Game *-down-&gt; mastermind.models.SecretCombination
mastermind.models.Game *-down-&gt; mastermind.models.Result
mastermind.models.Game --&gt; mastermind.models.ProposedCombination

class  mastermind.models.ProposedCombination{
+ ProposedCombination()
~ contains(Color): boolean
~ contains(int, Color): boolean
+ {static} getInstance(int[]): ProposedCombination
+ {static} isValid(int[]): Error
~ getCodes(): int[]
}
mastermind.models.Combination &lt;|-down- mastermind.models.ProposedCombination
mastermind.models.ProposedCombination ..&gt; mastermind.models.Error

class  mastermind.models.Result{
- blacks: int
- whites: int
~ Result(int, int)
~ isWinner(): boolean
~ getCodes(): int[]
}

class  mastermind.models.SecretCombination{
~ SecretCombination()
~ getResult(ProposedCombination): Result
}
mastermind.models.Combination &lt;|-down- mastermind.models.SecretCombination
mastermind.models.SecretCombination ..&gt; mastermind.models.Result
mastermind.models.SecretCombination ..&gt; mastermind.models.ProposedCombination</literallayout>
</section>
<section xml:id="paquete-mastermind-utils">
<title>Paquete <emphasis>mastermind.utils</emphasis></title>
<literallayout class="monospaced">class  mastermind.utils.ClosedInterval{
- min: int
- max: int
+ ClosedInterval(int, int)
+ includes(int): boolean
}

class  mastermind.utils.Console{
- bufferedReader: BufferedReader
+ Console()
+ write(char): void
+ write(String): void
+ readInt(String): int
+ readChar(String): char
- writeError(String): void
+ writeln(String): void
+ writeln(int): void
+ writeln(): void
+ readString(String): String
}
mastermind.utils.Console *-down-&gt; java.io.BufferedReader

class  mastermind.utils.WithConsoleView{
# console: Console
# WithConsoleView()
}
mastermind.utils.WithConsoleView *-down-&gt; mastermind.utils.Console

class  mastermind.utils.YesNoDialog{
- {static} AFIRMATIVE: char
- {static} NEGATIVE: char
- {static} QUESTION: String
- {static} MESSAGE: String
+ YesNoDialog()
+ read(String): boolean
- {static} isAfirmative(char): boolean
- {static} isNegative(char): boolean
}
mastermind.utils.WithConsoleView &lt;|-down- mastermind.utils.YesNoDialog</literallayout>
</section>
</section>
<section xml:id="calidad-del-software">
<title>Calidad del Software</title>
<section xml:id="diseño">
<title>Diseño</title>
<itemizedlist>
<listitem>
<simpara><phrase role="red line-through"><emphasis><emphasis role="strong">Método largo</emphasis>: Método "play" de Mastermind,&#8230;&#8203;</emphasis></phrase></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="rediseño">
<title>Rediseño</title>
<itemizedlist>
<listitem>
<simpara><emphasis>Nueva interfaz: Gráfica</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="red line-through"><emphasis><emphasis role="strong">Clases Grandes</emphasis>: los Modelos asumen la responsabilidad y crecen en líneas, métodos, atributos, &#8230;&#8203; con cada nueva tecnología</emphasis></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="red line-through"><emphasis><emphasis role="strong">Alto acoplamiento</emphasis>: los Modelos con cada nueva tecnología de interfaz (consola, gráficos, web, &#8230;&#8203;)</emphasis></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="red line-through"><emphasis><emphasis role="strong">Baja cohesión</emphasis>: cada Modelo está gestionando sus atributos y las tecnologías de interfaz</emphasis></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="red line-through"><emphasis><emphasis role="strong">Open/Close</emphasis>: hay que modificar los modelos que estaban funcionando previamente para escoger una tecnología de vista u otra (if&#8217;s anidados)</emphasis></phrase></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><emphasis>Nuevas funcionalidades: undo/redo, demo, estadísiticas,&#8230;&#8203;</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><phrase role="red"><emphasis><emphasis role="strong">Clases Grandes</emphasis>: los Modelos asumen la responsabilidad y crecen en líneas, métodos, atributos, &#8230;&#8203; con las nuevas funcionalidades</emphasis></phrase></simpara>
</listitem>
<listitem>
<simpara><phrase role="red"><emphasis><emphasis role="strong">Open/Close</emphasis>: hay que modificar los modelos que estaban funcionando previamente para incorporar nuevas funcionalidades</emphasis></phrase></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="vista-de-desarrolloimplementación">
<title>Vista de Desarrollo/Implementación</title>
<literallayout class="monospaced">package "  "  as mastermind {
}
package "  "  as mastermind.models {
}
package "  "  as mastermind.views {
}
package "  "  as mastermind.utils {
}
package "  "  as java.io {
}
package "  "  as java.util {
}

[mastermind.jar] as jar

jar *--&gt; mastermind
jar *--&gt; mastermind.models
jar *--&gt; mastermind.views
jar *--&gt; mastermind.utils
jar *--&gt; java.io
jar *--&gt; java.util</literallayout>
</section>
<section xml:id="vista-de-desplieguefísica">
<title>Vista de Despliegue/Física</title>
<literallayout class="monospaced">node node #DDDDDD [
&lt;b&gt;Personal Computer&lt;/b&gt;
----
memory : xxx Mb
cpu : xxx GHz
]

[ masterming.jar ] as component

node *--&gt; component</literallayout>
</section>
<section xml:id="vista-de-procesos">
<title>Vista de Procesos</title>
<itemizedlist>
<listitem>
<simpara>No hay concurrencia</simpara>
</listitem>
</itemizedlist>
</section>
</article>